spring:
  application:
    name: torneo-assessment
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:torneo_db}
    username: ${DB_USERNAME:torneo_user}
    password: ${DB_PASSWORD:torneo_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        use_sql_comments: true
        jdbc:
          batch_size: 20
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
    show-sql: false

  # Flyway Configuration
  flyway:
    baseline-on-migrate: true
    locations: classpath:db/migration
    baseline-version: 0

  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:/}
    
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/.well-known/jwks.json}

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on-param
    include-exception: false

# Management & Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,flyway
  endpoint:
    health:
      show-details: when-authorized
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

# Logging Configuration
logging:
  level:
    com.esport.torneo: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/torneo-assessment.log

# OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  info:
    title: Torneo Assessment API
    description: Sistema de Gestión de Torneos E-Sport
    version: 1.0.0
    contact:
      name: Andrés Orduz Grimaldo
      email: desarrollo@torneoesport.com

# Application Configuration
app:
  security:
    jwt:
      secret: ${JWT_SECRET:mySecretKey}
      expiration: ${JWT_EXPIRATION:86400000} # 24 hours
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
  
  tournament:
    max-free-tournaments-per-organizer: ${MAX_FREE_TOURNAMENTS:2}
    max-free-views-per-user: ${MAX_FREE_VIEWS:1}
    ticket:
      qr-size: ${QR_SIZE:300}
      expiration-hours: ${TICKET_EXPIRATION:24}
  
  notification:
    email:
      enabled: ${EMAIL_NOTIFICATIONS:true}
      from: ${EMAIL_FROM:noreply@torneoesport.com}
    websocket:
      enabled: ${WEBSOCKET_NOTIFICATIONS:true}
  
  commission:
    default-rate: ${DEFAULT_COMMISSION_RATE:0.05} # 5%
    platform-fee: ${PLATFORM_FEE:2.99}

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      tournamentService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
      
      ticketService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
  
  retry:
    instances:
      tournamentService:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
      
      ticketService:
        max-attempts: 3
        wait-duration: 1s

  timeout:
    instances:
      tournamentService:
        timeout-duration: 5s
      
      ticketService:
        timeout-duration: 3s

---
# Local Profile
spring:
  config:
    activate:
      on-profile: local
  
  datasource:
    url: jdbc:postgresql://localhost:5432/torneo_db
    username: torneo_user
    password: torneo_pass
  
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

logging:
  level:
    com.esport.torneo: DEBUG
    org.springframework.web: DEBUG

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://postgres:5432/torneo_db
    username: torneo_user
    password: torneo_pass
  
  rabbitmq:
    host: rabbitmq
    port: 5672
  
  data:
    redis:
      host: redis
      port: 6379

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  
  flyway:
    enabled: false

logging:
  level:
    com.esport.torneo: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: false

logging:
  level:
    com.esport.torneo: INFO
    org.springframework.security: WARN 